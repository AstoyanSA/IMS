@page "/produce"

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughtInventoriesForProducingUseCase ValidateEnoughtInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>

<h3>Производство продуктов</h3>
<br />
@if (produceViewModel != null)
{
	<EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<div class="form-group">
			<lable for="po">Номер производства</lable>
			<InputText id="po" class="form-control" @bind-Value="produceViewModel.ProductionNumber"></InputText>
		</div>

		<div class="form-group">
			<lable for="inv">Производимый продукт</lable>
			<ViewProductsComponent 
				OnSelectProduct="OnSelectProduct"
				DisplaySearchResult="true"></ViewProductsComponent>
			<InputText id="inv" class="form-control" disabled @bind-Value="produceViewModel.ProductName"></InputText>
			<input type="hidden" value="@produceViewModel.ProductId">
			@if (selectedProduct != null)
			{
				<text>Price: </text>
				@selectedProduct?.Price.ToString("c")
			}
		</div>

		<div class="form-group">
			<lable for="qty">Количество</lable>
			<InputNumber id="qty" class="form-control" @bind-Value="produceViewModel.QuantityToProduce"></InputNumber>
		</div>
		<br />

		<button type="submit" class="btn btn-primary">Сохранить</button>

	</EditForm>
}

@code {
	private ProduceViewModel produceViewModel = new ProduceViewModel();
	private Product selectedProduct;
	private string errorMessage;

	private async Task OnValidSubmit(){
		if (!await ValidateEnoughtInventoriesForProducingUseCase.ExecuteAsync(this.selectedProduct, this.produceViewModel.QuantityToProduce))
		{
			errorMessage = $"Недостаточно инвентаря для создания {this.selectedProduct.ProductName} в количестве {this.produceViewModel.QuantityToProduce} шт. ";
			return;
		}
		else
		{
			errorMessage = string.Empty;
		}

		await ProduceProductUseCase.ExecuteAsync(
			this.produceViewModel.ProductionNumber,
			this.selectedProduct,
			this.produceViewModel.QuantityToProduce,
			"Frank"
		);
		this.produceViewModel = new ProduceViewModel();
		this.selectedProduct = null;
	}

	private void OnSelectProduct(Product product)
	{
		this.selectedProduct = product;
		produceViewModel.ProductId = product.ProductId;
		produceViewModel.ProductName = product.ProductName;
	}
}
